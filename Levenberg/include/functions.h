#ifndef __FUNCTIONS__
#define __FUNCTIONS__

#include <cv.h>
#include <highgui.h>
#include <iostream>
#include "opencv2/opencv.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <vector>
#include <cstdlib>
#include <cstdio>

using namespace std;
using namespace cv;

struct ParamsK
{
  float fx;
  float fy;
  float gamma;
  float cx;
  float cy;
  ParamsK(float fx2, float fy2, float gamma2, float cx2, float cy2)
  {
    fx=fx2;
    fy=fy2;
    gamma=gamma2;
    cx=cx2;
    cy=cy2;
  }
};

void setRT(Mat& R, Mat& T)
{
  /*R=(Mat_<double>(3, 3)<<0.9996387701129885, -0.687944914363628, -0.01269168905964125,
                          0.02387739970980684, -0.2728610783010008, 0.6637865969388969,
                          0.0123368987225177, -0.6725166367827904, -0.256336177025927);*/

   /*R=(Mat_<double>(3, 3)<<1.00000,   0.00000,   0.00000,
                          0.00000,   0.86600,  -0.50000,
                          0.00000,   0.50000,   0.86600);*/
  
  /*T=(Mat_<double>(3,1)<<2.140332381160352,
                        2.203093403559037,
                        2.087089099904809 );*/


  //Matriz sacado del txt pruebaFeb8.txt
  /*R=(Mat_<double>(3, 3)<<0.9996387701129884, 0.02010707151713348, -0.01783353475890288,
                        0.02387739970981716, -0.3598367780173961, 0.9327096884717971,
                        0.01233689872252064, -0.932798584294093, -0.3601868988023387);

  T=(Mat_<double>(3,1)<<1.766323414619636,
                        1.818117362309279,
                        1.72238404558488);*/

  //Solo normalizados los ejes de rotaciÃ³n
/*R=(Mat_<double>(3, 3)<<0.9988988604339089, -0.7075980832836106, 0.03309697708199744,
                      -0.04588235392806756, 0.1077185850104823, 0.7045159563727574,
                      -0.009791640406882523, -0.698356398249991, 0.07513370611848302); 

T=(Mat_<double>(3,1)<<1.280259646134371,
                      1.124468921518049,
                      1.539281119006358); */
  //con gram-schm..
  R=(Mat_<double>(3, 3)<<0.9987881789589946, -0.007413781346115794, 0.04865397638351079,
  -0.04763209778800009, 0.1031353869407278, 0.9935261824536386,
  -0.01238373255887077, -0.994639697481826, 0.1026572713507038 );


 T=(Mat_<double>(3,1)<<1.048986285559383,
  0.9206554235539314,
  1.260519246082243 );
}

void setW(Point3d& W, double Wnorm, Mat& R)
{
 W=Point3d(R.at<double>(2,1)-R.at<double>(1, 2), 
          R.at<double>(0,2)-R.at<double>(2, 0), 
          R.at<double>(1,0)-R.at<double>(0, 1)); 
//cout<<"(2, 1): "<<R.at<double>(2,1)<<endl;
//W=W*(Wnorm/(2*sin(Wnorm)));
W=W*(1/(2*sin(Wnorm)));//Normalizado
  
}

void setXscn(Mat& Xscn, Mat& Ximg, Mat& K, int nP)
{
  /*Xscn=(Mat_<double>(3, nP)<<-0.4, -0.4, -0.4, -0.4, 0, 0, 0, 0, 0.4, 0.4, 0.4, 0.4,
                              0, 0.4, 0.8, 1.2, 0, 0.4, 0.8, 1.2, 0, 0.4, 0.8, 1.2,
                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

  Ximg=(Mat_<double>(3, nP)<<815, 800, 780, 754, 957, 959, 957, 959, 1099, 1114, 1134, 1160,
                            880, 924, 979, 1054, 878, 927, 979, 1057, 881, 928, 982, 1058, 
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);*/
    
  //puntos sacado del txt pruebaFeb8.txt
    /*Xscn=(Mat_<double>(3, nP)<<-0.4, -0.4, -0.4, -0.4, 0, 0, 0, 0, 0.4, 0.4, 0.4, 0.4,
                                0, 0.4, 0.8, 1.2, 0, 0.4, 0.8, 1.2, 0, 0.4, 0.8, 1.2,
                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

    Ximg=(Mat_<double>(3, nP)<<815, 800, 780, 754, 957, 959, 957, 959, 1099, 1114, 1134, 1160,
                              880, 924, 979, 1054, 878, 927, 979, 1057, 881, 928, 982, 1058,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 );*/
    


    Xscn=(Mat_<double>(3, nP)<<0, 0.119999997317791, 0.239999994635582, 0.3599999845027924, 0.4799999892711639, 0.5999999642372131, 0, 0.119999997317791, 0.239999994635582, 0.3599999845027924, 0.4799999892711639, 0.5999999642372131, 0, 0.119999997317791, 0.239999994635582, 0.3599999845027924, 0.4799999892711639, 0.5999999642372131, 0, 0.119999997317791, 0.239999994635582, 0.3599999845027924, 0.4799999892711639, 0.5999999642372131, 0, 0.119999997317791, 0.239999994635582, 0.3599999845027924, 0.4799999892711639, 0.5999999642372131, 0, 0.119999997317791, 0.239999994635582, 0.3599999845027924, 0.4799999892711639, 0.5999999642372131, 0, 0.119999997317791, 0.239999994635582, 0.3599999845027924, 0.4799999892711639, 0.5999999642372131, 0, 0.119999997317791, 0.239999994635582, 0.3599999845027924, 0.4799999892711639, 0.5999999642372131,//Primera fila
  0, 0, 0, 0, 0, 0, 0.119999997317791, 0.119999997317791, 0.119999997317791, 0.119999997317791, 0.119999997317791, 0.119999997317791, 0.239999994635582, 0.239999994635582, 0.239999994635582, 0.239999994635582, 0.239999994635582, 0.239999994635582, 0.3599999845027924, 0.3599999845027924, 0.3599999845027924, 0.3599999845027924, 0.3599999845027924, 0.3599999845027924, 0.4799999892711639, 0.4799999892711639, 0.4799999892711639, 0.4799999892711639, 0.4799999892711639, 0.4799999892711639, 0.5999999642372131, 0.5999999642372131, 0.5999999642372131, 0.5999999642372131, 0.5999999642372131, 0.5999999642372131, 0.7199999690055847, 0.7199999690055847, 0.7199999690055847, 0.7199999690055847, 0.7199999690055847, 0.7199999690055847, 0.8399999737739563, 0.8399999737739563, 0.8399999737739563, 0.8399999737739563, 0.8399999737739563, 0.8399999737739563, //segunda
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,//ter
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1); 

Ximg=(Mat_<double>(3, nP)<< 837.8741455078125, 897.2778930664062, 956.9844360351562, 1016.42333984375, 1076.3017578125, 1136.21044921875, 832.9345092773438, 895.29541015625, 957.1570434570312, 1019.464172363281, 1081.859375, 1144.757080078125, 827.8035278320312, 892.4791870117188, 957.6625366210938, 1022.542297363281, 1087.906127929688, 1153.239379882812, 821.8426513671875, 890.1197509765625, 957.7943115234375, 1026.245727539062, 1094.3779296875, 1163.309936523438, 815.56787109375, 886.8239135742188, 958.4537963867188, 1029.955322265625, 1101.938354492188, 1174.005615234375, 808.3628540039062, 883.7537841796875, 958.714111328125, 1034.350463867188, 1109.638305664062, 1185.86376953125, 800.7138061523438, 879.9265747070312, 959.5117797851562, 1038.83056640625, 1118.88916015625, 1198.915893554688, 791.6714477539062, 875.909912109375, 959.8040771484375, 1044.343017578125, 1128.69677734375, 1214.092529296875,
  679.0939331054688, 676.92724609375, 674.5238647460938, 672.1847534179688, 670.0202026367188, 667.4046630859375, 703.5702514648438, 701.4966430664062, 699.173828125, 696.7796020507812, 694.4873657226562, 692.2327270507812, 729.8762817382812, 726.9873046875, 724.7837524414062, 722.2488403320312, 719.9083862304688, 717.5863647460938, 758.3207397460938, 754.8271484375, 752.7904052734375, 750.1862182617188, 747.7540283203125, 745.3524169921875, 789.2471313476562, 786.6021728515625, 783.5311279296875, 781.093505859375, 778.31787109375, 776.1768798828125, 824.7357177734375, 821.5552368164062, 818.5955810546875, 816.066162109375, 813.6526489257812, 811.060791015625, 864.3524169921875, 861.1209106445312, 858.2491455078125, 855.4376220703125, 853.0947265625, 850.376708984375, 908.6774291992188, 905.4671020507812, 902.0062255859375, 899.7337036132812, 896.8604736328125, 894.7748413085938,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);


    Ximg=K.inv()*Ximg;
    for(int i=0; i<Ximg.cols; i++)
      Ximg(Rect(i, 0, 1, 3))/=norm(Ximg(Rect(i, 0, 1, 3)));//Deben estar normalizados los puntos

}


#endif
